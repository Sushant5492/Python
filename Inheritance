# Single inheritance example
class Emp:
    name = "Tata Motors"

    def show(self):
        print(f"The name is: {self.name}")

class Program:
    namee = "Tata Steel"

    def showless(self):
        print(f"The name of the company is: {self.namee}")

class Coder(Emp, Program):
    company = "Tata Power"

    def showmore(self):
        print(f"The company name is: {self.company}")

# Creating instances of the classes
a = Emp()
b = Program()
c = Coder()

print(a.name, b.namee, c.company)

c.show()       # From Emp class
c.showless()   # From Program class
c.showmore()   # From Coder class


# Multilevel inheritance example
class Person1:
    a = 10

class Person2(Person1):  # Person1 data comes in Person2
    b = 20

class Person3(Person2):  # Person2 data comes in Person3
    def s(self):
        super().__init__()
        # Super method works to initialize parents' attributes if needed
        self.c = Person1.a + Person2.b

o = Person3()
print(f"{o.a} + {o.b} = {o.a + o.b}")  # Output based on inherited attributes


# Using class method example
class EmpClassMethod:
    a = 1

    @classmethod
    def show(cls):
        print(f"The value of a is {cls.a}")

b = EmpClassMethod()
b.a = 45  # This will modify instance variable, not class variable
b.show()  # Still prints class variable value


# Property decorator example
class EmpProperty:
    def __init__(self):
        self._fname = ""
        self._lname = ""

    @property
    def name(self):
        return f"{self._fname} {self._lname}"

    @name.setter
    def name(self, value):
        self._fname = value.split(" ")[0]
        self._lname = value.split(" ")[1]

e = EmpProperty()
e.name = "Sushant Shinde"
print(e.name)  # Should print "Sushant Shinde"


# Operator overloading example
class Add:
    def __init__(self, n):
        self.n = n

    def __add__(self, other):
        return self.n + other.n

    def __mul__(self, other):
        return self.n * other.n

    def __floordiv__(self, other):
        return self.n // other.n

a = Add(10)
b = Add(5)

# Test operator overloading
print(a + b)      # Addition
print(a * b)      # Multiplication
print(a // b)     # Floor Division

# Corrected Person class with name validation
class Person:
    def __init__(self, name):
        self._name = name

    @property
    def name(self):
        return self._name

    @name.setter
    def name(self, value):
        if len(value) <= 3:
            raise ValueError("Name length should be greater than 3")
        self._name = value

# Example usage
p = Person("Sushant")
print(f"Your name is fulfilling our conditions: {p.name}")

# Practice Set
class TwoDVector:
    def __init__(self, i, j):
        self.i = i
        self.j = j

    def name(self):
        print(f"{self.i}i + {self.j}j")

class ThreeDVector(TwoDVector):
    def __init__(self, i, j, k):
        super().__init__(i, j)
        self.k = k

    def name(self):
        print(f"{self.i}i + {self.j}j + {self.k}k")

# Example usage
a = TwoDVector(4, 1)
a.name()  # Output: 4i + 1j

b = ThreeDVector(4, 3, 2)
b.name()  # Output: 4i + 3j + 2k


# Animal inheritance structure
class Animals:
    pass

class Pets(Animals):
    pass

class Dog(Pets):
    def __init__(self):
        print("Bark Bark!")

# Example usage
dog = Dog()  # Output: Bark Bark!


# Employee class with salary increment logic
class Employee:
    salary = 234
    increment = 20

    @property
    def salary_after_increment(self):
        return self.salary + (self.salary * self.increment / 100)  # 280

    @salary_after_increment.setter
    def salary_after_increment(self, salary):
        self.increment = ((salary / self.salary) - 1) * 100

# Example usage
a = Employee()
print(a.salary_after_increment)  # Output: 280.8

# Setting new increment using salary
a.salary_after_increment = 210
print(a.increment)  # Output: -10.256410256410255 (since new salary is less than old one)

# Setting new increment based on different salary
a.salary_after_increment = 100.9
print(a.increment)  # Output: -56.87606837606838
# 2D Vector class
class twodvector():
    def __init__(self, i, j):
        self.i = i
        self.j = j

# 3D Vector class inheriting from twodvector
class threedvector(twodvector):
    def __init__(self, i, j, k):
        super().__init__(i, j)
        self.k = k
    
    def show(self):
        print(f"{self.i}i + {self.j}j + {self.k}k")

# Example usage
a = threedvector(31, 2, 2)
a.show()  # Output: 31i + 2j + 2k
# Animal class
class animal():
    pass

# Pets class inheriting from Animal
class pets(animal):
    pass

# Dog class inheriting from Pets
class dog(pets):
    def show(self):
        print("bark bark!")

# Example usage
a = dog()
a.show()  # Output: bark bark!
# Complex number class
class complex():
    def __init__(self, i, r):
        self.i = i
        self.r = r
    
    # Overloading + operator
    def __add__(self, c2):
        return complex(self.i + c2.i, self.r + c2.r)
    
    # String representation
    def __str__(self):
        return f"{self.i} + {self.r}i"

# Example usage
c1 = complex(2, 3)
c2 = complex(4, 5)
c3 = c1 + c2
print(c3)  # Output: 6 + 8i


